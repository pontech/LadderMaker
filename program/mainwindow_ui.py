# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created: Mon Sep 15 16:35:13 2014
#      by: PyQt4 UI code generator 4.10.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(996, 609)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.graphicsView = QtGui.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 50, 651, 521))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setMouseTracking(True)
        self.graphicsView.setObjectName(_fromUtf8("graphicsView"))
        self.label = QtGui.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(580, 10, 50, 13))
        self.label.setObjectName(_fromUtf8("label"))
        self.label_2 = QtGui.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(630, 10, 50, 13))
        self.label_2.setText(_fromUtf8(""))
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.label_3 = QtGui.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(580, 30, 50, 13))
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.label_4 = QtGui.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(630, 30, 50, 13))
        self.label_4.setText(_fromUtf8(""))
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.undoBbutton = QtGui.QToolButton(self.centralwidget)
        self.undoBbutton.setGeometry(QtCore.QRect(30, 10, 61, 21))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/CurvedArrowRightDown.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.undoBbutton.setIcon(icon)
        self.undoBbutton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.undoBbutton.setObjectName(_fromUtf8("undoBbutton"))
        self.redoButton = QtGui.QToolButton(self.centralwidget)
        self.redoButton.setGeometry(QtCore.QRect(100, 10, 61, 21))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/CurvedArrowLeftDown.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.redoButton.setIcon(icon1)
        self.redoButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.redoButton.setObjectName(_fromUtf8("redoButton"))
        self.tableWidget = QtGui.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(680, 50, 231, 321))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.tableWidget.setFont(font)
        self.tableWidget.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setSelectionMode(QtGui.QAbstractItemView.NoSelection)
        self.tableWidget.setCornerButtonEnabled(False)
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setRowCount(0)
        item = QtGui.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtGui.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtGui.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(55)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setDefaultSectionSize(14)
        self.infoButton = QtGui.QPushButton(self.centralwidget)
        self.infoButton.setGeometry(QtCore.QRect(200, 10, 75, 23))
        self.infoButton.setObjectName(_fromUtf8("infoButton"))
        self.textBrowser = QtGui.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(680, 380, 231, 101))
        self.textBrowser.setObjectName(_fromUtf8("textBrowser"))
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtGui.QToolBar(MainWindow)
        self.toolBar.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.toolBar.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.toolBar.setObjectName(_fromUtf8("toolBar"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 996, 25))
        self.menuBar.setObjectName(_fromUtf8("menuBar"))
        self.menuFile = QtGui.QMenu(self.menuBar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        self.menuEdit = QtGui.QMenu(self.menuBar)
        self.menuEdit.setObjectName(_fromUtf8("menuEdit"))
        self.menuHelp = QtGui.QMenu(self.menuBar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuDiagnostics = QtGui.QMenu(self.menuBar)
        self.menuDiagnostics.setObjectName(_fromUtf8("menuDiagnostics"))
        MainWindow.setMenuBar(self.menuBar)
        self.toolBar_2 = QtGui.QToolBar(MainWindow)
        self.toolBar_2.setObjectName(_fromUtf8("toolBar_2"))
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar_2)
        self.actionContNO = QtGui.QAction(MainWindow)
        self.actionContNO.setCheckable(True)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/contact_NO_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionContNO.setIcon(icon2)
        self.actionContNO.setObjectName(_fromUtf8("actionContNO"))
        self.actionContNC = QtGui.QAction(MainWindow)
        self.actionContNC.setCheckable(True)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/contact_NC_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionContNC.setIcon(icon3)
        self.actionContNC.setObjectName(_fromUtf8("actionContNC"))
        self.actionCoil = QtGui.QAction(MainWindow)
        self.actionCoil.setCheckable(True)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/Coil_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCoil.setIcon(icon4)
        self.actionCoil.setObjectName(_fromUtf8("actionCoil"))
        self.actionClose = QtGui.QAction(MainWindow)
        self.actionClose.setObjectName(_fromUtf8("actionClose"))
        self.actionUndo = QtGui.QAction(MainWindow)
        self.actionUndo.setObjectName(_fromUtf8("actionUndo"))
        self.actionRedo = QtGui.QAction(MainWindow)
        self.actionRedo.setObjectName(_fromUtf8("actionRedo"))
        self.actionaddRung = QtGui.QAction(MainWindow)
        self.actionaddRung.setCheckable(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/rung.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionaddRung.setIcon(icon5)
        self.actionaddRung.setObjectName(_fromUtf8("actionaddRung"))
        self.actionWiden = QtGui.QAction(MainWindow)
        self.actionWiden.setCheckable(True)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/widen.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionWiden.setIcon(icon6)
        self.actionWiden.setObjectName(_fromUtf8("actionWiden"))
        self.actionOpen = QtGui.QAction(MainWindow)
        self.actionOpen.setObjectName(_fromUtf8("actionOpen"))
        self.actionNew = QtGui.QAction(MainWindow)
        self.actionNew.setObjectName(_fromUtf8("actionNew"))
        self.actionSave = QtGui.QAction(MainWindow)
        self.actionSave.setObjectName(_fromUtf8("actionSave"))
        self.actionDEL = QtGui.QAction(MainWindow)
        self.actionDEL.setCheckable(True)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/del.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDEL.setIcon(icon7)
        self.actionDEL.setObjectName(_fromUtf8("actionDEL"))
        self.actionORwire = QtGui.QAction(MainWindow)
        self.actionORwire.setCheckable(True)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/ORwire.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionORwire.setIcon(icon8)
        self.actionORwire.setObjectName(_fromUtf8("actionORwire"))
        self.actionNarrow = QtGui.QAction(MainWindow)
        self.actionNarrow.setCheckable(True)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/narrow.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNarrow.setIcon(icon9)
        self.actionNarrow.setObjectName(_fromUtf8("actionNarrow"))
        self.actionFalling = QtGui.QAction(MainWindow)
        self.actionFalling.setCheckable(True)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/falling_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFalling.setIcon(icon10)
        self.actionFalling.setObjectName(_fromUtf8("actionFalling"))
        self.actionTimer = QtGui.QAction(MainWindow)
        self.actionTimer.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/timer_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTimer.setIcon(icon11)
        self.actionTimer.setObjectName(_fromUtf8("actionTimer"))
        self.actionCounter = QtGui.QAction(MainWindow)
        self.actionCounter.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/counter_button.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCounter.setIcon(icon12)
        self.actionCounter.setObjectName(_fromUtf8("actionCounter"))
        self.actionEdit_nTools = QtGui.QAction(MainWindow)
        self.actionEdit_nTools.setObjectName(_fromUtf8("actionEdit_nTools"))
        self.actionElemnents = QtGui.QAction(MainWindow)
        self.actionElemnents.setObjectName(_fromUtf8("actionElemnents"))
        self.actionWhatsThis = QtGui.QAction(MainWindow)
        self.actionWhatsThis.setObjectName(_fromUtf8("actionWhatsThis"))
        self.actionCheck_HW = QtGui.QAction(MainWindow)
        self.actionCheck_HW.setObjectName(_fromUtf8("actionCheck_HW"))
        self.actionUSBHelp = QtGui.QAction(MainWindow)
        self.actionUSBHelp.setObjectName(_fromUtf8("actionUSBHelp"))
        self.actionSettings = QtGui.QAction(MainWindow)
        self.actionSettings.setCheckable(True)
        self.actionSettings.setObjectName(_fromUtf8("actionSettings"))
        self.actionWaltech = QtGui.QAction(MainWindow)
        self.actionWaltech.setCheckable(True)
        self.actionWaltech.setChecked(True)
        self.actionWaltech.setAutoRepeat(False)
        self.actionWaltech.setMenuRole(QtGui.QAction.ApplicationSpecificRole)
        self.actionWaltech.setObjectName(_fromUtf8("actionWaltech"))
        self.actionArduinoUno = QtGui.QAction(MainWindow)
        self.actionArduinoUno.setCheckable(True)
        self.actionArduinoUno.setMenuRole(QtGui.QAction.ApplicationSpecificRole)
        self.actionArduinoUno.setObjectName(_fromUtf8("actionArduinoUno"))
        self.actionCheck_HW_2 = QtGui.QAction(MainWindow)
        self.actionCheck_HW_2.setObjectName(_fromUtf8("actionCheck_HW_2"))
        self.actionArduinoUno_IO = QtGui.QAction(MainWindow)
        self.actionArduinoUno_IO.setObjectName(_fromUtf8("actionArduinoUno_IO"))
        self.actionSave_As = QtGui.QAction(MainWindow)
        self.actionSave_As.setObjectName(_fromUtf8("actionSave_As"))
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionPlus = QtGui.QAction(MainWindow)
        self.actionPlus.setCheckable(True)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/plus.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPlus.setIcon(icon13)
        self.actionPlus.setObjectName(_fromUtf8("actionPlus"))
        self.actionMinus = QtGui.QAction(MainWindow)
        self.actionMinus.setCheckable(True)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/minus.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMinus.setIcon(icon14)
        self.actionMinus.setObjectName(_fromUtf8("actionMinus"))
        self.actionEquals = QtGui.QAction(MainWindow)
        self.actionEquals.setCheckable(True)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/equ.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEquals.setIcon(icon15)
        self.actionEquals.setObjectName(_fromUtf8("actionEquals"))
        self.actionMove = QtGui.QAction(MainWindow)
        self.actionMove.setCheckable(True)
        self.actionMove.setEnabled(False)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/move.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMove.setIcon(icon16)
        self.actionMove.setVisible(False)
        self.actionMove.setObjectName(_fromUtf8("actionMove"))
        self.actionDivide = QtGui.QAction(MainWindow)
        self.actionDivide.setCheckable(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/divide.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDivide.setIcon(icon17)
        self.actionDivide.setObjectName(_fromUtf8("actionDivide"))
        self.actionMult = QtGui.QAction(MainWindow)
        self.actionMult.setCheckable(True)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/times.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMult.setIcon(icon18)
        self.actionMult.setObjectName(_fromUtf8("actionMult"))
        self.actionGreater = QtGui.QAction(MainWindow)
        self.actionGreater.setCheckable(True)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/greater_than.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGreater.setIcon(icon19)
        self.actionGreater.setObjectName(_fromUtf8("actionGreater"))
        self.actionLessthan = QtGui.QAction(MainWindow)
        self.actionLessthan.setCheckable(True)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/less_than.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLessthan.setIcon(icon20)
        self.actionLessthan.setObjectName(_fromUtf8("actionLessthan"))
        self.actionGreaterOrEq = QtGui.QAction(MainWindow)
        self.actionGreaterOrEq.setCheckable(True)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/greater_than_or_eq.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGreaterOrEq.setIcon(icon21)
        self.actionGreaterOrEq.setObjectName(_fromUtf8("actionGreaterOrEq"))
        self.actionLessOrEq = QtGui.QAction(MainWindow)
        self.actionLessOrEq.setCheckable(True)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/less_than_or_eq.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLessOrEq.setIcon(icon22)
        self.actionLessOrEq.setObjectName(_fromUtf8("actionLessOrEq"))
        self.actionPWM = QtGui.QAction(MainWindow)
        self.actionPWM.setCheckable(True)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/PWM.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPWM.setIcon(icon23)
        self.actionPWM.setObjectName(_fromUtf8("actionPWM"))
        self.actionADC = QtGui.QAction(MainWindow)
        self.actionADC.setCheckable(True)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icons/ADC.svg")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionADC.setIcon(icon24)
        self.actionADC.setObjectName(_fromUtf8("actionADC"))
        self.actionArduinoMega_IO = QtGui.QAction(MainWindow)
        self.actionArduinoMega_IO.setObjectName(_fromUtf8("actionArduinoMega_IO"))
        self.actionArduinoMega = QtGui.QAction(MainWindow)
        self.actionArduinoMega.setCheckable(True)
        self.actionArduinoMega.setObjectName(_fromUtf8("actionArduinoMega"))
        self.actionArduinoNano = QtGui.QAction(MainWindow)
        self.actionArduinoNano.setCheckable(True)
        self.actionArduinoNano.setMenuRole(QtGui.QAction.ApplicationSpecificRole)
        self.actionArduinoNano.setObjectName(_fromUtf8("actionArduinoNano"))
        self.actionArduinoNano_IO = QtGui.QAction(MainWindow)
        self.actionArduinoNano_IO.setObjectName(_fromUtf8("actionArduinoNano_IO"))
        self.toolBar.addAction(self.actionElemnents)
        self.toolBar.addAction(self.actionContNO)
        self.toolBar.addAction(self.actionContNC)
        self.toolBar.addAction(self.actionCoil)
        self.toolBar.addAction(self.actionFalling)
        self.toolBar.addAction(self.actionTimer)
        self.toolBar.addAction(self.actionCounter)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPlus)
        self.toolBar.addAction(self.actionMinus)
        self.toolBar.addAction(self.actionMult)
        self.toolBar.addAction(self.actionDivide)
        self.toolBar.addAction(self.actionMove)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionGreater)
        self.toolBar.addAction(self.actionLessthan)
        self.toolBar.addAction(self.actionGreaterOrEq)
        self.toolBar.addAction(self.actionLessOrEq)
        self.toolBar.addAction(self.actionEquals)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPWM)
        self.toolBar.addAction(self.actionADC)
        self.toolBar.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuHelp.addAction(self.actionWhatsThis)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionUSBHelp)
        self.menuHelp.addAction(self.actionArduinoUno_IO)
        self.menuHelp.addAction(self.actionArduinoNano_IO)
        self.menuHelp.addAction(self.actionArduinoMega_IO)
        self.menuHelp.addAction(self.actionAbout)
        self.menuDiagnostics.addAction(self.actionWaltech)
        self.menuDiagnostics.addAction(self.actionArduinoUno)
        self.menuDiagnostics.addAction(self.actionArduinoNano)
        self.menuDiagnostics.addAction(self.actionArduinoMega)
        self.menuDiagnostics.addSeparator()
        self.menuDiagnostics.addAction(self.actionCheck_HW_2)
        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuDiagnostics.menuAction())
        self.menuBar.addAction(self.menuHelp.menuAction())
        self.toolBar_2.addAction(self.actionEdit_nTools)
        self.toolBar_2.addAction(self.actionaddRung)
        self.toolBar_2.addAction(self.actionORwire)
        self.toolBar_2.addAction(self.actionWiden)
        self.toolBar_2.addAction(self.actionNarrow)
        self.toolBar_2.addAction(self.actionDEL)

        self.retranslateUi(MainWindow)
        QtCore.QObject.connect(self.actionClose, QtCore.SIGNAL(_fromUtf8("activated()")), MainWindow.close)
        QtCore.QObject.connect(self.undoBbutton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionUndo.trigger)
        QtCore.QObject.connect(self.redoButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionRedo.trigger)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "Waltech Ladder Maker", None))
        self.label.setText(_translate("MainWindow", "Mouse X:", None))
        self.label_3.setText(_translate("MainWindow", "Mouse Y:", None))
        self.undoBbutton.setText(_translate("MainWindow", "Undo", None))
        self.redoButton.setText(_translate("MainWindow", "Redo", None))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Name", None))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "I/O", None))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Elmnt.", None))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "loc.", None))
        self.infoButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Create hex file and upload it to the Hardware</p></body></html>", None))
        self.infoButton.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>This buton starts the following: </p><p>- creation of C code.  </p><p>- compiling of that cod with GCC</p><p>- uploading of the resulting hex file to the hardware via USB</p></body></html>", None))
        self.infoButton.setText(_translate("MainWindow", "compile", None))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Elements", None))
        self.menuFile.setTitle(_translate("MainWindow", "File", None))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit", None))
        self.menuHelp.setTitle(_translate("MainWindow", "Help", None))
        self.menuDiagnostics.setTitle(_translate("MainWindow", "Hardware", None))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2", None))
        self.actionContNO.setText(_translate("MainWindow", "contNO", None))
        self.actionContNO.setToolTip(_translate("MainWindow", "Normally Open Contact", None))
        self.actionContNO.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#000000;\">Inserts a Normally Open Contact in the ladder. </span><span style=\" font-size:10pt; color:#000000;\"><br/><br/>--A dialog window will appear.<br/>--Choose an input from the dropdown menu.<br/>--If &quot;internal&quot; selected and name is shared, the state will come from a Coil</span><span style=\" color:#000000;\"/></p></body></html>", None))
        self.actionContNC.setText(_translate("MainWindow", "contNC", None))
        self.actionContNC.setToolTip(_translate("MainWindow", "Normally Closed Contact", None))
        self.actionContNC.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'Sans Serif\'; font-size:11pt; color:#000000;\">Inserts a Normally Closed Contact in the ladder. <br/><br/>--A dialog window will appear.<br/>--Choose an input from the dropdown menu.<br/>--If &quot;internal&quot; selected and name is shared, the state will come from a Coil </span></p></body></html>", None))
        self.actionCoil.setText(_translate("MainWindow", "Coil", None))
        self.actionCoil.setToolTip(_translate("MainWindow", "Coil", None))
        self.actionCoil.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#000000;\">Inserts a Coil in the ladder. <br/><br/>--A dialog window will appear.<br/>--Choose an Output from the dropdown menu.<br/>--If &quot;internal&quot; selected and name is shared with another element, the state of this coil will pass to that element.</span></p></body></html>", None))
        self.actionClose.setText(_translate("MainWindow", "Close", None))
        self.actionUndo.setText(_translate("MainWindow", "undo", None))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z", None))
        self.actionRedo.setText(_translate("MainWindow", "redo", None))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+R", None))
        self.actionaddRung.setText(_translate("MainWindow", "addRung", None))
        self.actionaddRung.setToolTip(_translate("MainWindow", "Add a Rung", None))
        self.actionaddRung.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Add a rung</p><p>Note: rungs can be converted to OR branches with the vertical wire tool.</p></body></html>", None))
        self.actionWiden.setText(_translate("MainWindow", "Widen", None))
        self.actionWiden.setToolTip(_translate("MainWindow", "Widen rung", None))
        self.actionWiden.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Makes the entire ladder one element width wider.</p></body></html>", None))
        self.actionOpen.setText(_translate("MainWindow", "Open", None))
        self.actionNew.setText(_translate("MainWindow", "New", None))
        self.actionSave.setText(_translate("MainWindow", "Save", None))
        self.actionDEL.setText(_translate("MainWindow", "DEL", None))
        self.actionDEL.setToolTip(_translate("MainWindow", "<html><head/><body><p>Delete an element or empty rung </p></body></html>", None))
        self.actionDEL.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Delete an element</p><p>Delete an empty rung</p><p>Note: Use the vertical wire (OR) to delete branches. </p></body></html>", None))
        self.actionORwire.setText(_translate("MainWindow", "OR wire", None))
        self.actionORwire.setToolTip(_translate("MainWindow", "<html><head/><body><p>Toggles vertical wire to to OR branch.</p><p>Connects Rung to Rung below, Becomes OR branch</p></body></html>", None))
        self.actionORwire.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>--Click to add or remove a vertical wire</p><p>--This tool can link rungs together to make an OR branch.</p><p>--Use this tool to widen or shrink the OR branch</p></body></html>", None))
        self.actionNarrow.setText(_translate("MainWindow", "Narrow", None))
        self.actionNarrow.setToolTip(_translate("MainWindow", "Remove extra empty locations", None))
        self.actionNarrow.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Narrows the ladder by one element width</p></body></html>", None))
        self.actionFalling.setText(_translate("MainWindow", "falling", None))
        self.actionFalling.setToolTip(_translate("MainWindow", "Falling edge", None))
        self.actionFalling.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#000000;\">Inserts a falling Edge in the ladder. <br/><br/>--Creates a 10ns pulse on the rung-out when a falling edge is dected at the rung-in</span><br/></p></body></html>", None))
        self.actionTimer.setText(_translate("MainWindow", "Timer", None))
        self.actionTimer.setToolTip(_translate("MainWindow", "Timer", None))
        self.actionTimer.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#000000;\">Inserts a Timer in the ladder. <br/><br/>--A dialog window will appear.<br/>--Set the time delay.  10 min max (655 sec)<br/>--If rung-in state goes True and stays that way for the delay duration, the rung-out will go True.  <br/>--Timer is reset when the rung-in state goes False</p></body></html>", None))
        self.actionCounter.setText(_translate("MainWindow", "Counter", None))
        self.actionCounter.setToolTip(_translate("MainWindow", "Counter", None))
        self.actionCounter.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#000000;\">Inserts a Counter in the ladder. <br/><br/>--A dialog window will appear.<br/>--Set the number of counts (setpoint).  65535 max.<br/>--If rung-in state goes True setpoint number of times, the rung-out will go True. <br/>--Choose a name.  If shared with a Coil, this will provide a Reset.</p></body></html>", None))
        self.actionEdit_nTools.setText(_translate("MainWindow", "Edit", None))
        self.actionElemnents.setText(_translate("MainWindow", "Elemnents", None))
        self.actionWhatsThis.setText(_translate("MainWindow", "WhatsThis", None))
        self.actionWhatsThis.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click this to get help with a tool</p></body></html>", None))
        self.actionCheck_HW.setText(_translate("MainWindow", "Test Hardware", None))
        self.actionCheck_HW.setToolTip(_translate("MainWindow", "<html><head/><body><p>Checks USB</p></body></html>", None))
        self.actionCheck_HW.setWhatsThis(_translate("MainWindow", "Checks USB connection, programmer, and controller.", None))
        self.actionUSBHelp.setText(_translate("MainWindow", "USB", None))
        self.actionSettings.setText(_translate("MainWindow", "Settings", None))
        self.actionWaltech.setText(_translate("MainWindow", "Waltech", None))
        self.actionArduinoUno.setText(_translate("MainWindow", "Arduino Uno", None))
        self.actionCheck_HW_2.setText(_translate("MainWindow", "Test USB", None))
        self.actionCheck_HW_2.setToolTip(_translate("MainWindow", "Test USB connection, drver, programmer, hardware", None))
        self.actionArduinoUno_IO.setText(_translate("MainWindow", "Arduino Uno IO", None))
        self.actionSave_As.setText(_translate("MainWindow", "Save As", None))
        self.actionAbout.setText(_translate("MainWindow", "About", None))
        self.actionPlus.setText(_translate("MainWindow", "Plus", None))
        self.actionPlus.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Add. </p><p>Must be paced on far right.</p><p>Sources can be a constant or a name of another element. </p><p>sources and result are 16 bit signed.  (-32767 to 32767)</p></body></html>", None))
        self.actionMinus.setText(_translate("MainWindow", "minus", None))
        self.actionMinus.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Subtract. </p><p>Must be paced on far right.</p><p>Sources can be a constant or a name of another element. </p><p>sources and result are 16 bit signed.  (-32767 to 32767)</p><p><br/></p></body></html>", None))
        self.actionEquals.setText(_translate("MainWindow", "equals", None))
        self.actionEquals.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Comparison: Equals.</p><p>Conductive if true.</p><p>Sources can be a constant or a name of another element. </p><p><br/></p></body></html>", None))
        self.actionMove.setText(_translate("MainWindow", "move", None))
        self.actionDivide.setText(_translate("MainWindow", "divide", None))
        self.actionDivide.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Divide. </p><p>Must be paced on far right.</p><p>Sources can be a constant or a name of another element. </p><p>sources and result are 16 bit signed.  (-32767 to 32767)</p><p>Divide by zero OK.</p></body></html>", None))
        self.actionMult.setText(_translate("MainWindow", "mult", None))
        self.actionMult.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Multiply.</p><p>Must be paced on far right.</p><p>Sources can be a constant or a name of another element. </p><p>sources and result are 16 bit signed.  (-32767 to 32767)</p></body></html>", None))
        self.actionGreater.setText(_translate("MainWindow", "greater", None))
        self.actionGreater.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Comparison: Greater Than.</p><p>Conductive if true.</p><p>Sources can be a constant or a name of another element.</p></body></html>", None))
        self.actionLessthan.setText(_translate("MainWindow", "lessthan", None))
        self.actionLessthan.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Comparison: Less Than.</p><p>Conductive if true.</p><p>Sources can be a constant or a name of another element.</p></body></html>", None))
        self.actionGreaterOrEq.setText(_translate("MainWindow", "greaterOrEq", None))
        self.actionGreaterOrEq.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>Comparison: Greater Than or Equal.</p><p>Conductive if true.</p><p>Sources can be a constant or a name of another element.</p></body></html>", None))
        self.actionLessOrEq.setText(_translate("MainWindow", "lessOrEq", None))
        self.actionLessOrEq.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Comparison: Less Than or Equal.</p><p>Conductive if true.</p><p>Sources can be a constant or a name of another element.</p></body></html>", None))
        self.actionPWM.setText(_translate("MainWindow", "PWM", None))
        self.actionPWM.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Pulse width modulated output. </span></p><p><span style=\" color:#000000;\">Must be placed on far right.</span></p><p><span style=\" color:#000000;\">Active if rung in state True.</span></p><p><span style=\" color:#000000;\">Menu item will be greyed if PWM not available on this hardware.</span></p><p><span style=\" color:#000000;\">If output set to &quot;Internal&quot; PWM will be de-activated</span></p><p><span style=\" color:#000000;\">NOTES:</span></p><p><span style=\" color:#000000;\">If two PWM elements exist in the ladder with the same hardware output, the first active one will apply. This allows to set a single output to different levels.</span></p><p><span style=\" color:#000000;\">The PWM frequency is fixed at 16khz. </span></p></body></html>", None))
        self.actionADC.setText(_translate("MainWindow", "ADC", None))
        self.actionADC.setWhatsThis(_translate("MainWindow", "<html><head/><body><span style=\" font-size:11pt; color:#000000;\"><p>ADC. Measure Voltage.</p><p>Ten bit output (0 to 1024)</p><p>5v (AVcc) refrence.  value = (Vin x 1024)÷5</p><p>Must be placed on far right.</p><p>Active if rung in state True.</p><p>Menu item will be greyed if ADC not available on this hardware.</p><p>if input set to &quot;Internal&quot; ADC will be de-activated.</p><p><br/></p></body></html>", None))
        self.actionArduinoMega_IO.setText(_translate("MainWindow", "Arduino Mega IO", None))
        self.actionArduinoMega.setText(_translate("MainWindow", "Arduino Mega", None))
        self.actionArduinoNano.setText(_translate("MainWindow", "Arduino Nano", None))
        self.actionArduinoNano_IO.setText(_translate("MainWindow", "Arduino Nano IO", None))

import toolbaricons_rc

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

